In each of the random testers, a random number of players is chosen to initialize a new game state, and a random player is given a turn.  The gamestate is then deep copied for later comparison before cardEffect is called with the card in question (along with other random values).  The new game state is then checked to make sure the card functioned properly.  In the case of cards being drawn, the new game state is compared against the old game state to ensure that the correct number has been drawn.  In the case of the adventurer card, where the drawn cards must be of a certain type (money), the last two cards are tested to see if they are in fact money.  Each test run is performed many times with many different randomized game states to ensure good coverage.  Both the tests themselves and the cards they are testing are covered very well, with the only code not being executed being the shuffle function in the adventurer card implementation (because the deck was not empty).  However, unittest3 covers the shuffle function anyway.  Additionally, the tests have been shown to detect modifications to the card implementations; the tests will report errors if, for example, the wrong number of treasures is specified for the adventurer card, or if the council room card doesn't properly distribute cards amongst the players.  The latter bug was introduced for assignment 1 and is still present so that the tests can be seen failing; player 0 will not receive a card when another player uses a council room card.
